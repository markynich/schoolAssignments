%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Box::print() by Christian Lindig
%%BoundingBox: 42 35 241 106
%%Pages: 1
%%EndComments

gsave
38 113 translate
0.2851 -0.2851 scale
% $Id$
% Header for DDD PostScript Box output

% Copyright (C) 1995-1998 Technische Universitaet Braunschweig, Germany.
% Written by Christian Lindig <lindig@ips.cs.tu-bs.de>.
% 
% This file is part of DDD.
% 
% DDD is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public
% License as published by the Free Software Foundation; either
% version 3 of the License, or (at your option) any later version.
% 
% DDD is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public
% License along with DDD -- see the file COPYING.
% If not, see <http://www.gnu.org/licenses/>.
% 
% DDD is the data display debugger.
% For details, see the DDD World-Wide-Web page, 
% `http://www.gnu.org/software/ddd/',
% or send a mail to the DDD developers <ddd@gnu.org>.

% Make all definitions local to the ddddict dictionary
/ddddict 25 dict def 

ddddict begin		% make dict active 


% Global variables
/fontSize+ 12 def
/font+ /Courier def  


% Some small utilities
/cm { 28.34646 mul } bind def


% ISOLATIN1* - reencode a font to ISO Latin 1 encoding
%
% newfont table oldfont isolatin1*

/isolatin1* {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def


% Define the ISO Latin 1 encoding of a font
 
/isotable[
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma
/hyphen/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S
/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar
/braceright/asciitilde/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis
/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron/.notdef/exclamdown/cent
/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guilsinglleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute
/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis
/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def


% YCORRECT*
% The reference point of a string ist NOT its lower left corner but 
% its baseline.  Therefore, the y coordinate must be corrected.  
% Returns the correction for the current font.
%
% ycorrect* y

/ycorrect* {
	currentfont /FontBBox get
	aload pop pop pop
	currentfont /FontMatrix get dtransform
	exch pop
} def 


% TEXT*
% print out a string and make sure not to require more space than
% specified.
% font xsize ysize xorigin yorigin (string) text*

/text* {

	/string+ exch def		% set up some variables ..
	moveto				% move to (xorigin,yorigin)
	/ysize+ exch def
	/xsize+ exch def
	/thefont+ exch def

	% is the right font already selected ?

	thefont+ font+ ne 
	ysize+ fontSize+ ne
	or {	
		% set up the right font - reencode it	
		
		/Symbol thefont+ eq 
		{
			thefont+ findfont
		}{

			/isofont+ isotable thefont+ isolatin1*	
			/isofont+ findfont
		}ifelse

		[ysize+ 0 0 ysize+ neg 0 0] makefont
		setfont
		
		/font+ thefont+ def
		/fontSize+ ysize+ def
	} if

	% correct current point 

	0 ycorrect* neg rmoveto

	% string too long?  Scale it down ...
	% The actual font is scaled. There is a good chance,
	% that this will not happen too often when the font is not
	% changed during the calls of text*

	xsize+ string+ stringwidth pop div dup dup
	1 lt {
		0 0 1 0 0 6 array astore currentfont exch 
		makefont setfont
		pop
	}{ 
		% string is too short ... scale it up

		1.05 gt {
			0 0 1 0 0 6 array astore currentfont exch 
			makefont setfont	
		}{
			pop

		} ifelse
	} ifelse
	
	string+ show

} bind def

	
% ARROWLINE*
% Draw a line of given width with an arrow at its end
% len gives the height of the triangle forming the head of the arrow
% and angle the angle at its top
%	
% angle len  x1 y1 x2 y2 linewidth arrowline*

/arrowline* {
	setlinewidth			% angle len x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/len+ exch def			% height of triangle

	/alpha+ 
		y2 y1 sub		% define alpha+
		x2 x1 sub
		atan
	def

	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def  
	
	newpath				% draw the line
	x1 y1 moveto 
	x2 len+ alpha+ cos mul sub 	% shorten the line to the end  
	y2 len+ alpha+ sin mul sub 	% of the triangle
	lineto
	stroke		

	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x2 y2 
	translate			% origin now at x2 y2

	alpha+ 90 sub rotate 		% rotate the system

	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def

% ARROWHEAD*
% draw an arrow head inclined by alpha at (x,y)
%
% angle len alpha x y

/arrowhead* {
	/y exch def
	/x exch def
	/alpha+ exch def
	/len+ exch def			% height of triangle

	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def

	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x y 
	translate			% origin now at x y

	alpha+ 90 sub rotate 		% rotate the system

	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def


% LINE*
% draw a line of given width from (x1,y1) to (x2,y2)
%
% x1 y1 x2 y2 width line*

/line* {
	setlinewidth	% x1 y1 x2 y2
	newpath
	4 2 roll 	% x2 y2 x1 y1
	moveto		% x2 y2
	lineto		
	stroke
} bind def


% CLEAN*
%
% fill a box given by four points with white colour ..
% x1 y1 x2 y2 x3 y3 x4 y4 clean*

/clean* {
	gsave
	1 setgray
	0 setlinewidth
	newpath
	moveto  lineto  lineto lineto
	closepath
	fill
	grestore
} bind def


% BOX*
% fill a box given by four points
%
% x1 y1 x2 y2 x3 y3 x4 y4 box*

/box* {
	0 setlinewidth
	newpath
	moveto 	lineto 	lineto lineto
	closepath
	fill
} bind def


% ARC*
% draw an ellipse with center (cx,cy), radius dx dy, starting at start
% and ending at end.
%
% start end dx dy cx cy width arc*

/arc* {
	gsave
	setlinewidth
	translate
	newpath
	dup 3 1 roll		% start end dy dx dy
	div 1 scale		% dy dx/dy 1 scale => start end dy
	
	0 exch  0 exch		% start end 0 0 dy 
	5 -2 roll 		% 0 0 dy start end

	dup
	0 eq {			% replace 0 by 360
		pop 
		360
	} if
	arc
	stroke
	grestore
} bind def


% BEGINCOLOR* / ENDCOLOR*
% Draw something using a specific foreground color
%
% red green blue begincolor* SOMETHING endcolor*

/begincolor* {
        currentrgbcolor         % red green blue red' green' blue'
        6 3 roll                % red' green' blue' red green blue
	setrgbcolor             % red' green' blue'
} bind def

/endcolor* {
	setrgbcolor
} bind def


% Set up the right font to the right size

/isofont+ isotable font+ isolatin1* 	% reencode font+
					% and make it the current font
/isofont+ findfont
[fontSize+ 0 0 fontSize+ neg 0 0] makefont
setfont


%%EndProlog
0 0 0.545098 begincolor*
30 10 115 71 123 111 1 arrowline*
/Helvetica-Narrow 12 13 113 89 (*\(\)) text*
30 10 210 177 286 207 1 arrowline*
/Helvetica-Narrow 38 13 229 190 (*\(\(\).left\)) text*
30 10 470 240 537 240 1 arrowline*
/Helvetica-Narrow 45 13 481 238 (*\(\(\).right\)) text*
endcolor*
0 0 0 begincolor*
14 25 211 25 211 71 14 71 clean*
0 0 0 begincolor* % black
14 25 210 25 210 26 14 26 box* %(14, 25)(196, 1)
14 26 15 26 15 69 14 69 box* %(14, 26)(1, 43)
0 0 0 begincolor* % black
/Courier 10 18 17 46 (1) text*
/Courier 20 18 27 46 (: ) text*
/Courier-BoldOblique 150 18 47 46 (Telegraph::root) text*
endcolor*
17 46 207 46 207 47 17 47 box* %(17, 46)(190, 1)
0 0 0.545098 begincolor* % blue4
/Courier 190 18 17 67 (\(TNODE *\) 0x804a008) text*
endcolor*
209 26 210 26 210 69 209 69 box* %(209, 26)(1, 43)
14 69 210 69 210 70 14 70 box* %(14, 69)(196, 1)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
210 26 211 26 211 70 210 70 box* %(210, 26)(1, 44)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
15 70 211 70 211 71 15 71 box* %(15, 70)(196, 1)
endcolor*
26 111 231 111 231 178 26 178 clean*
0 0 0 begincolor* % black
26 111 230 111 230 112 26 112 box* %(26, 111)(204, 1)
26 112 27 112 27 176 26 176 box* %(26, 112)(1, 64)
0 0 0 begincolor* % black
29 114 227 114 227 115 29 115 box* %(29, 114)(198, 1)
29 115 30 115 30 173 29 173 box* %(29, 115)(1, 58)
/Courier 60 18 44 135 (symbol) text*
/Courier 30 18 104 135 ( = ) text*
0 0 0 begincolor* % black
/Courier 60 18 134 135 (42 \'*\') text*
endcolor*
/Courier 40 18 44 153 (left) text*
/Courier 30 18 104 153 ( = ) text*
0 0 0.545098 begincolor* % blue4
/Courier 90 18 134 153 (0x804a018) text*
endcolor*
/Courier 50 18 44 171 (right) text*
/Courier 30 18 104 171 ( = ) text*
0 0 0.545098 begincolor* % blue4
1 0 0 begincolor* % red
/Courier 30 18 134 171 (0x0) text*
endcolor*
endcolor*
226 115 227 115 227 173 226 173 box* %(226, 115)(1, 58)
29 173 227 173 227 174 29 174 box* %(29, 173)(198, 1)
endcolor*
229 112 230 112 230 176 229 176 box* %(229, 112)(1, 64)
26 176 230 176 230 177 26 177 box* %(26, 176)(204, 1)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
230 112 231 112 231 177 230 177 box* %(230, 112)(1, 65)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
27 177 231 177 231 178 27 178 box* %(27, 177)(204, 1)
endcolor*
537 207 712 207 712 274 537 274 clean*
0 0 0 begincolor* % black
537 207 711 207 711 208 537 208 box* %(537, 207)(174, 1)
537 208 538 208 538 272 537 272 box* %(537, 208)(1, 64)
0 0 0 begincolor* % black
540 210 708 210 708 211 540 211 box* %(540, 210)(168, 1)
540 211 541 211 541 269 540 269 box* %(540, 211)(1, 58)
/Courier 60 18 555 231 (symbol) text*
/Courier 30 18 615 231 ( = ) text*
0 0 0 begincolor* % black
0.996109 0.996109 0.796887 begincolor* % #ffffcc
645 213 705 213 705 231 645 231 box* %(645, 213)(60, 18)
endcolor*
0 0 0 begincolor* % black
/Courier 60 18 645 231 (65 \'A\') text*
endcolor*
endcolor*
/Courier 40 18 555 249 (left) text*
/Courier 30 18 615 249 ( = ) text*
0 0 0.545098 begincolor* % blue4
1 0 0 begincolor* % red
/Courier 30 18 645 249 (0x0) text*
endcolor*
endcolor*
/Courier 50 18 555 267 (right) text*
/Courier 30 18 615 267 ( = ) text*
0 0 0.545098 begincolor* % blue4
1 0 0 begincolor* % red
/Courier 30 18 645 267 (0x0) text*
endcolor*
endcolor*
707 211 708 211 708 269 707 269 box* %(707, 211)(1, 58)
540 269 708 269 708 270 540 270 box* %(540, 269)(168, 1)
endcolor*
710 208 711 208 711 272 710 272 box* %(710, 208)(1, 64)
537 272 711 272 711 273 537 273 box* %(537, 272)(174, 1)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
711 208 712 208 712 273 711 273 box* %(711, 208)(1, 65)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
538 273 712 273 712 274 538 274 box* %(538, 273)(174, 1)
endcolor*
266 207 471 207 471 274 266 274 clean*
0 0 0 begincolor* % black
266 207 470 207 470 208 266 208 box* %(266, 207)(204, 1)
266 208 267 208 267 272 266 272 box* %(266, 208)(1, 64)
0 0 0 begincolor* % black
269 210 467 210 467 211 269 211 box* %(269, 210)(198, 1)
269 211 270 211 270 269 269 269 box* %(269, 211)(1, 58)
/Courier 60 18 284 231 (symbol) text*
/Courier 30 18 344 231 ( = ) text*
0 0 0 begincolor* % black
/Courier 60 18 374 231 (42 \'*\') text*
endcolor*
/Courier 40 18 284 249 (left) text*
/Courier 30 18 344 249 ( = ) text*
0 0 0.545098 begincolor* % blue4
1 0 0 begincolor* % red
/Courier 30 18 374 249 (0x0) text*
endcolor*
endcolor*
/Courier 50 18 284 267 (right) text*
/Courier 30 18 344 267 ( = ) text*
0 0 0.545098 begincolor* % blue4
/Courier 90 18 374 267 (0x804a028) text*
endcolor*
466 211 467 211 467 269 466 269 box* %(466, 211)(1, 58)
269 269 467 269 467 270 269 270 box* %(269, 269)(198, 1)
endcolor*
469 208 470 208 470 272 469 272 box* %(469, 208)(1, 64)
266 272 470 272 470 273 266 273 box* %(266, 272)(204, 1)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
470 208 471 208 471 273 470 273 box* %(470, 208)(1, 65)
endcolor*
0.745098 0.745098 0.745098 begincolor* % grey
267 273 471 273 471 274 267 274 box* %(267, 273)(204, 1)
endcolor*
endcolor*
%%Trailer

% $Id$
% Trailer for DDD PostScript Box output

grestore
showpage
end		% of ddddict 
