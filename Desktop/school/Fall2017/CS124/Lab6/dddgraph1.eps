%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Box::print() by Christian Lindig
%%BoundingBox: 42 35 241 114
%%Pages: 1
%%EndComments

gsave
39 117 translate
0.21238 -0.21238 scale
% $Id$
% Header for DDD PostScript Box output

% Copyright (C) 1995-1998 Technische Universitaet Braunschweig, Germany.
% Written by Christian Lindig <lindig@ips.cs.tu-bs.de>.
% 
% This file is part of DDD.
% 
% DDD is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public
% License as published by the Free Software Foundation; either
% version 3 of the License, or (at your option) any later version.
% 
% DDD is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public
% License along with DDD -- see the file COPYING.
% If not, see <http://www.gnu.org/licenses/>.
% 
% DDD is the data display debugger.
% For details, see the DDD World-Wide-Web page, 
% `http://www.gnu.org/software/ddd/',
% or send a mail to the DDD developers <ddd@gnu.org>.

% Make all definitions local to the ddddict dictionary
/ddddict 25 dict def 

ddddict begin		% make dict active 


% Global variables
/fontSize+ 12 def
/font+ /Courier def  


% Some small utilities
/cm { 28.34646 mul } bind def


% ISOLATIN1* - reencode a font to ISO Latin 1 encoding
%
% newfont table oldfont isolatin1*

/isolatin1* {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def


% Define the ISO Latin 1 encoding of a font
 
/isotable[
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma
/hyphen/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S
/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar
/braceright/asciitilde/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis
/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron/.notdef/exclamdown/cent
/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guilsinglleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute
/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis
/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def


% YCORRECT*
% The reference point of a string ist NOT its lower left corner but 
% its baseline.  Therefore, the y coordinate must be corrected.  
% Returns the correction for the current font.
%
% ycorrect* y

/ycorrect* {
	currentfont /FontBBox get
	aload pop pop pop
	currentfont /FontMatrix get dtransform
	exch pop
} def 


% TEXT*
% print out a string and make sure not to require more space than
% specified.
% font xsize ysize xorigin yorigin (string) text*

/text* {

	/string+ exch def		% set up some variables ..
	moveto				% move to (xorigin,yorigin)
	/ysize+ exch def
	/xsize+ exch def
	/thefont+ exch def

	% is the right font already selected ?

	thefont+ font+ ne 
	ysize+ fontSize+ ne
	or {	
		% set up the right font - reencode it	
		
		/Symbol thefont+ eq 
		{
			thefont+ findfont
		}{

			/isofont+ isotable thefont+ isolatin1*	
			/isofont+ findfont
		}ifelse

		[ysize+ 0 0 ysize+ neg 0 0] makefont
		setfont
		
		/font+ thefont+ def
		/fontSize+ ysize+ def
	} if

	% correct current point 

	0 ycorrect* neg rmoveto

	% string too long?  Scale it down ...
	% The actual font is scaled. There is a good chance,
	% that this will not happen too often when the font is not
	% changed during the calls of text*

	xsize+ string+ stringwidth pop div dup dup
	1 lt {
		0 0 1 0 0 6 array astore currentfont exch 
		makefont setfont
		pop
	}{ 
		% string is too short ... scale it up

		1.05 gt {
			0 0 1 0 0 6 array astore currentfont exch 
			makefont setfont	
		}{
			pop

		} ifelse
	} ifelse
	
	string+ show

} bind def

	
% ARROWLINE*
% Draw a line of given width with an arrow at its end
% len gives the height of the triangle forming the head of the arrow
% and angle the angle at its top
%	
% angle len  x1 y1 x2 y2 linewidth arrowline*

/arrowline* {
	setlinewidth			% angle len x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/len+ exch def			% height of triangle

	/alpha+ 
		y2 y1 sub		% define alpha+
		x2 x1 sub
		atan
	def

	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def  
	
	newpath				% draw the line
	x1 y1 moveto 
	x2 len+ alpha+ cos mul sub 	% shorten the line to the end  
	y2 len+ alpha+ sin mul sub 	% of the triangle
	lineto
	stroke		

	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x2 y2 
	translate			% origin now at x2 y2

	alpha+ 90 sub rotate 		% rotate the system

	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def

% ARROWHEAD*
% draw an arrow head inclined by alpha at (x,y)
%
% angle len alpha x y

/arrowhead* {
	/y exch def
	/x exch def
	/alpha+ exch def
	/len+ exch def			% height of triangle

	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def

	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x y 
	translate			% origin now at x y

	alpha+ 90 sub rotate 		% rotate the system

	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def


% LINE*
% draw a line of given width from (x1,y1) to (x2,y2)
%
% x1 y1 x2 y2 width line*

/line* {
	setlinewidth	% x1 y1 x2 y2
	newpath
	4 2 roll 	% x2 y2 x1 y1
	moveto		% x2 y2
	lineto		
	stroke
} bind def


% CLEAN*
%
% fill a box given by four points with white colour ..
% x1 y1 x2 y2 x3 y3 x4 y4 clean*

/clean* {
	gsave
	1 setgray
	0 setlinewidth
	newpath
	moveto  lineto  lineto lineto
	closepath
	fill
	grestore
} bind def


% BOX*
% fill a box given by four points
%
% x1 y1 x2 y2 x3 y3 x4 y4 box*

/box* {
	0 setlinewidth
	newpath
	moveto 	lineto 	lineto lineto
	closepath
	fill
} bind def


% ARC*
% draw an ellipse with center (cx,cy), radius dx dy, starting at start
% and ending at end.
%
% start end dx dy cx cy width arc*

/arc* {
	gsave
	setlinewidth
	translate
	newpath
	dup 3 1 roll		% start end dy dx dy
	div 1 scale		% dy dx/dy 1 scale => start end dy
	
	0 exch  0 exch		% start end 0 0 dy 
	5 -2 roll 		% 0 0 dy start end

	dup
	0 eq {			% replace 0 by 360
		pop 
		360
	} if
	arc
	stroke
	grestore
} bind def


% BEGINCOLOR* / ENDCOLOR*
% Draw something using a specific foreground color
%
% red green blue begincolor* SOMETHING endcolor*

/begincolor* {
        currentrgbcolor         % red green blue red' green' blue'
        6 3 roll                % red' green' blue' red green blue
	setrgbcolor             % red' green' blue'
} bind def

/endcolor* {
	setrgbcolor
} bind def


% Set up the right font to the right size

/isofont+ isotable font+ isolatin1* 	% reencode font+
					% and make it the current font
/isofont+ findfont
[fontSize+ 0 0 fontSize+ neg 0 0] makefont
setfont


%%EndProlog
30 10 210 48 298 48 1 arrowline*
/Helvetica-Narrow 12 13 248 46 (*\(\)) text*
30 10 298 78 230 98 1 arrowline*
/Helvetica-Narrow 38 13 245 86 (*\(\(\).left\)) text*
30 10 210 161 286 191 1 arrowline*
/Helvetica-Narrow 45 13 226 174 (*\(\(\).right\)) text*
30 10 502 48 602 48 1 arrowline*
/Helvetica-Narrow 45 13 530 46 (*\(\(\).right\)) text*
30 10 677 81 651 111 1 arrowline*
/Helvetica-Narrow 38 13 645 94 (*\(\(\).left\)) text*
30 10 624 177 624 207 1 arrowline*
/Helvetica-Narrow 38 13 605 190 (*\(\(\).left\)) text*
30 10 602 273 582 303 1 arrowline*
/Helvetica-Narrow 38 13 573 286 (*\(\(\).left\)) text*
30 10 701 177 771 207 1 arrowline*
/Helvetica-Narrow 45 13 714 190 (*\(\(\).right\)) text*
30 10 821 273 795 303 1 arrowline*
/Helvetica-Narrow 38 13 789 286 (*\(\(\).left\)) text*
30 10 128 161 128 191 1 arrowline*
/Helvetica-Narrow 38 13 109 174 (*\(\(\).left\)) text*
30 10 205 257 275 287 1 arrowline*
/Helvetica-Narrow 45 13 218 270 (*\(\(\).right\)) text*
30 10 250 334 215 340 1 arrowline*
/Helvetica-Narrow 38 13 214 335 (*\(\(\).left\)) text*
14 25 211 25 211 71 14 71 clean*
14 25 210 25 210 26 14 26 box* %(14, 25)(196, 1)
14 26 15 26 15 69 14 69 box* %(14, 26)(1, 43)
/Courier 10 18 17 46 (1) text*
/Courier 20 18 27 46 (: ) text*
/Courier-BoldOblique 150 18 47 46 (Telegraph::root) text*
17 46 207 46 207 47 17 47 box* %(17, 46)(190, 1)
/Courier 190 18 17 67 (\(TNODE *\) 0x804b008) text*
209 26 210 26 210 69 209 69 box* %(209, 26)(1, 43)
14 69 210 69 210 70 14 70 box* %(14, 69)(196, 1)
210 26 211 26 211 70 210 70 box* %(210, 26)(1, 44)
15 70 211 70 211 71 15 71 box* %(15, 70)(196, 1)
298 15 503 15 503 82 298 82 clean*
298 15 502 15 502 16 298 16 box* %(298, 15)(204, 1)
298 16 299 16 299 80 298 80 box* %(298, 16)(1, 64)
301 18 499 18 499 19 301 19 box* %(301, 18)(198, 1)
301 19 302 19 302 77 301 77 box* %(301, 19)(1, 58)
/Courier 60 18 316 39 (symbol) text*
/Courier 30 18 376 39 ( = ) text*
/Courier 60 18 406 39 (42 \'*\') text*
/Courier 40 18 316 57 (left) text*
/Courier 30 18 376 57 ( = ) text*
/Courier 90 18 406 57 (0x804b018) text*
/Courier 50 18 316 75 (right) text*
/Courier 30 18 376 75 ( = ) text*
/Courier 90 18 406 75 (0x804b038) text*
498 19 499 19 499 77 498 77 box* %(498, 19)(1, 58)
301 77 499 77 499 78 301 78 box* %(301, 77)(198, 1)
501 16 502 16 502 80 501 80 box* %(501, 16)(1, 64)
298 80 502 80 502 81 298 81 box* %(298, 80)(204, 1)
502 16 503 16 503 81 502 81 box* %(502, 16)(1, 65)
299 81 503 81 503 82 299 82 box* %(299, 81)(204, 1)
602 15 807 15 807 82 602 82 clean*
602 15 806 15 806 16 602 16 box* %(602, 15)(204, 1)
602 16 603 16 603 80 602 80 box* %(602, 16)(1, 64)
605 18 803 18 803 19 605 19 box* %(605, 18)(198, 1)
605 19 606 19 606 77 605 77 box* %(605, 19)(1, 58)
/Courier 60 18 620 39 (symbol) text*
/Courier 30 18 680 39 ( = ) text*
/Courier 60 18 710 39 (42 \'*\') text*
/Courier 40 18 620 57 (left) text*
/Courier 30 18 680 57 ( = ) text*
/Courier 90 18 710 57 (0x804b048) text*
/Courier 50 18 620 75 (right) text*
/Courier 30 18 680 75 ( = ) text*
/Courier 30 18 710 75 (0x0) text*
802 19 803 19 803 77 802 77 box* %(802, 19)(1, 58)
605 77 803 77 803 78 605 78 box* %(605, 77)(198, 1)
805 16 806 16 806 80 805 80 box* %(805, 16)(1, 64)
602 80 806 80 806 81 602 81 box* %(602, 80)(204, 1)
806 16 807 16 807 81 806 81 box* %(806, 16)(1, 65)
603 81 807 81 807 82 603 82 box* %(603, 81)(204, 1)
522 207 727 207 727 274 522 274 clean*
522 207 726 207 726 208 522 208 box* %(522, 207)(204, 1)
522 208 523 208 523 272 522 272 box* %(522, 208)(1, 64)
525 210 723 210 723 211 525 211 box* %(525, 210)(198, 1)
525 211 526 211 526 269 525 269 box* %(525, 211)(1, 58)
/Courier 60 18 540 231 (symbol) text*
/Courier 30 18 600 231 ( = ) text*
/Courier 60 18 630 231 (68 \'D\') text*
/Courier 40 18 540 249 (left) text*
/Courier 30 18 600 249 ( = ) text*
/Courier 90 18 630 249 (0x804b068) text*
/Courier 50 18 540 267 (right) text*
/Courier 30 18 600 267 ( = ) text*
/Courier 30 18 630 267 (0x0) text*
722 211 723 211 723 269 722 269 box* %(722, 211)(1, 58)
525 269 723 269 723 270 525 270 box* %(525, 269)(198, 1)
725 208 726 208 726 272 725 272 box* %(725, 208)(1, 64)
522 272 726 272 726 273 522 273 box* %(522, 272)(204, 1)
726 208 727 208 727 273 726 273 box* %(726, 208)(1, 65)
523 273 727 273 727 274 523 274 box* %(523, 273)(204, 1)
522 111 727 111 727 178 522 178 clean*
522 111 726 111 726 112 522 112 box* %(522, 111)(204, 1)
522 112 523 112 523 176 522 176 box* %(522, 112)(1, 64)
525 114 723 114 723 115 525 115 box* %(525, 114)(198, 1)
525 115 526 115 526 173 525 173 box* %(525, 115)(1, 58)
/Courier 60 18 540 135 (symbol) text*
/Courier 30 18 600 135 ( = ) text*
/Courier 60 18 630 135 (42 \'*\') text*
/Courier 40 18 540 153 (left) text*
/Courier 30 18 600 153 ( = ) text*
/Courier 90 18 630 153 (0x804b058) text*
/Courier 50 18 540 171 (right) text*
/Courier 30 18 600 171 ( = ) text*
/Courier 90 18 630 171 (0x804b078) text*
722 115 723 115 723 173 722 173 box* %(722, 115)(1, 58)
525 173 723 173 723 174 525 174 box* %(525, 173)(198, 1)
725 112 726 112 726 176 725 176 box* %(725, 112)(1, 64)
522 176 726 176 726 177 522 177 box* %(522, 176)(204, 1)
726 112 727 112 727 177 726 177 box* %(726, 112)(1, 65)
523 177 727 177 727 178 523 178 box* %(523, 177)(204, 1)
746 207 951 207 951 274 746 274 clean*
746 207 950 207 950 208 746 208 box* %(746, 207)(204, 1)
746 208 747 208 747 272 746 272 box* %(746, 208)(1, 64)
749 210 947 210 947 211 749 211 box* %(749, 210)(198, 1)
749 211 750 211 750 269 749 269 box* %(749, 211)(1, 58)
/Courier 60 18 764 231 (symbol) text*
/Courier 30 18 824 231 ( = ) text*
/Courier 60 18 854 231 (42 \'*\') text*
/Courier 40 18 764 249 (left) text*
/Courier 30 18 824 249 ( = ) text*
/Courier 90 18 854 249 (0x804b088) text*
/Courier 50 18 764 267 (right) text*
/Courier 30 18 824 267 ( = ) text*
/Courier 30 18 854 267 (0x0) text*
946 211 947 211 947 269 946 269 box* %(946, 211)(1, 58)
749 269 947 269 947 270 749 270 box* %(749, 269)(198, 1)
949 208 950 208 950 272 949 272 box* %(949, 208)(1, 64)
746 272 950 272 950 273 746 273 box* %(746, 272)(204, 1)
950 208 951 208 951 273 950 273 box* %(950, 208)(1, 65)
747 273 951 273 951 274 747 274 box* %(747, 273)(204, 1)
473 303 648 303 648 370 473 370 clean*
473 303 647 303 647 304 473 304 box* %(473, 303)(174, 1)
473 304 474 304 474 368 473 368 box* %(473, 304)(1, 64)
476 306 644 306 644 307 476 307 box* %(476, 306)(168, 1)
476 307 477 307 477 365 476 365 box* %(476, 307)(1, 58)
/Courier 60 18 491 327 (symbol) text*
/Courier 30 18 551 327 ( = ) text*
/Courier 60 18 581 327 (66 \'B\') text*
/Courier 40 18 491 345 (left) text*
/Courier 30 18 551 345 ( = ) text*
/Courier 30 18 581 345 (0x0) text*
/Courier 50 18 491 363 (right) text*
/Courier 30 18 551 363 ( = ) text*
/Courier 30 18 581 363 (0x0) text*
643 307 644 307 644 365 643 365 box* %(643, 307)(1, 58)
476 365 644 365 644 366 476 366 box* %(476, 365)(168, 1)
646 304 647 304 647 368 646 368 box* %(646, 304)(1, 64)
473 368 647 368 647 369 473 369 box* %(473, 368)(174, 1)
647 304 648 304 648 369 647 369 box* %(647, 304)(1, 65)
474 369 648 369 648 370 474 370 box* %(474, 369)(174, 1)
681 303 856 303 856 370 681 370 clean*
681 303 855 303 855 304 681 304 box* %(681, 303)(174, 1)
681 304 682 304 682 368 681 368 box* %(681, 304)(1, 64)
684 306 852 306 852 307 684 307 box* %(684, 306)(168, 1)
684 307 685 307 685 365 684 365 box* %(684, 307)(1, 58)
/Courier 60 18 699 327 (symbol) text*
/Courier 30 18 759 327 ( = ) text*
/Courier 60 18 789 327 (67 \'C\') text*
/Courier 40 18 699 345 (left) text*
/Courier 30 18 759 345 ( = ) text*
/Courier 30 18 789 345 (0x0) text*
/Courier 50 18 699 363 (right) text*
/Courier 30 18 759 363 ( = ) text*
/Courier 30 18 789 363 (0x0) text*
851 307 852 307 852 365 851 365 box* %(851, 307)(1, 58)
684 365 852 365 852 366 684 366 box* %(684, 365)(168, 1)
854 304 855 304 855 368 854 368 box* %(854, 304)(1, 64)
681 368 855 368 855 369 681 369 box* %(681, 368)(174, 1)
855 304 856 304 856 369 855 369 box* %(855, 304)(1, 65)
682 369 856 369 856 370 682 370 box* %(682, 369)(174, 1)
26 95 231 95 231 162 26 162 clean*
26 95 230 95 230 96 26 96 box* %(26, 95)(204, 1)
26 96 27 96 27 160 26 160 box* %(26, 96)(1, 64)
29 98 227 98 227 99 29 99 box* %(29, 98)(198, 1)
29 99 30 99 30 157 29 157 box* %(29, 99)(1, 58)
/Courier 60 18 44 119 (symbol) text*
/Courier 30 18 104 119 ( = ) text*
/Courier 60 18 134 119 (69 \'E\') text*
/Courier 40 18 44 137 (left) text*
/Courier 30 18 104 137 ( = ) text*
/Courier 90 18 134 137 (0x804b098) text*
/Courier 50 18 44 155 (right) text*
/Courier 30 18 104 155 ( = ) text*
/Courier 90 18 134 155 (0x804b028) text*
226 99 227 99 227 157 226 157 box* %(226, 99)(1, 58)
29 157 227 157 227 158 29 158 box* %(29, 157)(198, 1)
229 96 230 96 230 160 229 160 box* %(229, 96)(1, 64)
26 160 230 160 230 161 26 161 box* %(26, 160)(204, 1)
230 96 231 96 231 161 230 161 box* %(230, 96)(1, 65)
27 161 231 161 231 162 27 162 box* %(27, 161)(204, 1)
281 191 456 191 456 258 281 258 clean*
281 191 455 191 455 192 281 192 box* %(281, 191)(174, 1)
281 192 282 192 282 256 281 256 box* %(281, 192)(1, 64)
284 194 452 194 452 195 284 195 box* %(284, 194)(168, 1)
284 195 285 195 285 253 284 253 box* %(284, 195)(1, 58)
/Courier 60 18 299 215 (symbol) text*
/Courier 30 18 359 215 ( = ) text*
/Courier 60 18 389 215 (65 \'A\') text*
/Courier 40 18 299 233 (left) text*
/Courier 30 18 359 233 ( = ) text*
/Courier 30 18 389 233 (0x0) text*
/Courier 50 18 299 251 (right) text*
/Courier 30 18 359 251 ( = ) text*
/Courier 30 18 389 251 (0x0) text*
451 195 452 195 452 253 451 253 box* %(451, 195)(1, 58)
284 253 452 253 452 254 284 254 box* %(284, 253)(168, 1)
454 192 455 192 455 256 454 256 box* %(454, 192)(1, 64)
281 256 455 256 455 257 281 257 box* %(281, 256)(174, 1)
455 192 456 192 456 257 455 257 box* %(455, 192)(1, 65)
282 257 456 257 456 258 282 258 box* %(282, 257)(174, 1)
26 191 231 191 231 258 26 258 clean*
26 191 230 191 230 192 26 192 box* %(26, 191)(204, 1)
26 192 27 192 27 256 26 256 box* %(26, 192)(1, 64)
29 194 227 194 227 195 29 195 box* %(29, 194)(198, 1)
29 195 30 195 30 253 29 253 box* %(29, 195)(1, 58)
/Courier 60 18 44 215 (symbol) text*
/Courier 30 18 104 215 ( = ) text*
/Courier 60 18 134 215 (42 \'*\') text*
/Courier 40 18 44 233 (left) text*
/Courier 30 18 104 233 ( = ) text*
/Courier 30 18 134 233 (0x0) text*
/Courier 50 18 44 251 (right) text*
/Courier 30 18 104 251 ( = ) text*
/Courier 90 18 134 251 (0x804b0a8) text*
226 195 227 195 227 253 226 253 box* %(226, 195)(1, 58)
29 253 227 253 227 254 29 254 box* %(29, 253)(198, 1)
229 192 230 192 230 256 229 256 box* %(229, 192)(1, 64)
26 256 230 256 230 257 26 257 box* %(26, 256)(204, 1)
230 192 231 192 231 257 230 257 box* %(230, 192)(1, 65)
27 257 231 257 231 258 27 258 box* %(27, 257)(204, 1)
250 287 455 287 455 354 250 354 clean*
250 287 454 287 454 288 250 288 box* %(250, 287)(204, 1)
250 288 251 288 251 352 250 352 box* %(250, 288)(1, 64)
253 290 451 290 451 291 253 291 box* %(253, 290)(198, 1)
253 291 254 291 254 349 253 349 box* %(253, 291)(1, 58)
/Courier 60 18 268 311 (symbol) text*
/Courier 30 18 328 311 ( = ) text*
/Courier 60 18 358 311 (42 \'*\') text*
/Courier 40 18 268 329 (left) text*
/Courier 30 18 328 329 ( = ) text*
/Courier 90 18 358 329 (0x804b0b8) text*
/Courier 50 18 268 347 (right) text*
/Courier 30 18 328 347 ( = ) text*
/Courier 30 18 358 347 (0x0) text*
450 291 451 291 451 349 450 349 box* %(450, 291)(1, 58)
253 349 451 349 451 350 253 350 box* %(253, 349)(198, 1)
453 288 454 288 454 352 453 352 box* %(453, 288)(1, 64)
250 352 454 352 454 353 250 353 box* %(250, 352)(204, 1)
454 288 455 288 455 353 454 353 box* %(454, 288)(1, 65)
251 353 455 353 455 354 251 354 box* %(251, 353)(204, 1)
41 319 216 319 216 386 41 386 clean*
41 319 215 319 215 320 41 320 box* %(41, 319)(174, 1)
41 320 42 320 42 384 41 384 box* %(41, 320)(1, 64)
44 322 212 322 212 323 44 323 box* %(44, 322)(168, 1)
44 323 45 323 45 381 44 381 box* %(44, 323)(1, 58)
/Courier 60 18 59 343 (symbol) text*
/Courier 30 18 119 343 ( = ) text*
/Courier 60 18 149 343 (70 \'F\') text*
/Courier 40 18 59 361 (left) text*
/Courier 30 18 119 361 ( = ) text*
/Courier 30 18 149 361 (0x0) text*
/Courier 50 18 59 379 (right) text*
/Courier 30 18 119 379 ( = ) text*
/Courier 30 18 149 379 (0x0) text*
211 323 212 323 212 381 211 381 box* %(211, 323)(1, 58)
44 381 212 381 212 382 44 382 box* %(44, 381)(168, 1)
214 320 215 320 215 384 214 384 box* %(214, 320)(1, 64)
41 384 215 384 215 385 41 385 box* %(41, 384)(174, 1)
215 320 216 320 216 385 215 385 box* %(215, 320)(1, 65)
42 385 216 385 216 386 42 386 box* %(42, 385)(174, 1)
%%Trailer

% $Id$
% Trailer for DDD PostScript Box output

grestore
showpage
end		% of ddddict 
